// build.gradle
plugins {
    id 'java'
    id 'me.champeau.jmh' version '0.7.2'
    id 'application'
}

group = 'basics.mastery.java.collections'
version = '2.0.0'
description = 'Java Collections Framework Tutorial - Comprehensive guide from fundamentals to advanced patterns'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Core Java Collections Framework (built-in, no additional dependencies needed)
    
    // Enhanced collections libraries for advanced examples
    implementation 'org.eclipse.collections:eclipse-collections:11.1.0'
    implementation 'org.eclipse.collections:eclipse-collections-api:11.1.0'
    
    // Concurrent and reactive libraries for advanced patterns
    implementation 'io.projectreactor:reactor-core:3.6.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    
    // Performance monitoring and metrics
    implementation 'io.micrometer:micrometer-core:1.12.0'
    
    // Utility libraries
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    // JMH benchmarking
    jmh 'org.openjdk.jmh:jmh-core:1.37'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

application {
    mainClass = 'basics.mastery.java.collections.CollectionsTutorial'
    applicationName = 'java-collections-tutorial'
}

// Configure Java compilation with modern features
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '--enable-preview',
        '-Xlint:all',
        '-Xlint:-processing',
        '-parameters'
    ]
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '--enable-preview',
        '-Xlint:all',
        '-Xlint:-processing',
        '-parameters'
    ]
}

// Test configuration
tasks.named('test') {
    useJUnitPlatform()
    jvmArgs = [
        '--enable-preview',
        '-Xmx2g',
        '-XX:+UseG1GC',
        '-XX:+FlightRecorder'
    ]
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
    
    // Generate test reports
    reports {
        html.required = true
        junitXml.required = true
    }
}

// Run configuration
tasks.named('run') {
    jvmArgs = [
        '--enable-preview',
        '-Xmx1g',
        '-XX:+UseG1GC'
    ]
    
    // Enable console input for interactive tutorial
    standardInput = System.in
}

// JMH benchmarking configuration
jmh {
    jvmArgs = [
        '--enable-preview', 
        '-Xmx4g',
        '-XX:+UseG1GC',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseZGC'
    ]
    warmupIterations = 3
    iterations = 5
    fork = 2
    threads = 1
    benchmarkMode = ['avgt', 'thrpt']
    timeUnit = 'ms'
    includeTests = false
}

// Custom tasks for tutorial
task tutorialHelp {
    group = 'tutorial'
    description = 'Displays help information for the Java Collections Tutorial'
    doLast {
        println """
╔══════════════════════════════════════════════════════════════════════════════╗
║                         JAVA COLLECTIONS TUTORIAL                           ║
║                              Quick Start Guide                               ║
╚══════════════════════════════════════════════════════════════════════════════╝

📚 Available Gradle Tasks:

🎯 Running the Tutorial:
   ./gradlew run                    - Start the interactive tutorial
   ./gradlew tutorialHelp          - Show this help message

🧪 Testing:
   ./gradlew test                  - Run all unit tests
   ./gradlew test --info          - Run tests with detailed output

⚡ Performance Analysis:
   ./gradlew jmh                   - Run JMH benchmarks
   ./gradlew jmhReport            - Generate benchmark reports

🔧 Development:
   ./gradlew build                - Build the entire project
   ./gradlew clean build          - Clean and rebuild
   ./gradlew javadoc              - Generate API documentation

📋 Tutorial Structure:
   • Fundamentals: List, Set, Map, Queue implementations
   • Concurrent: Thread-safe collections and patterns
   • Functional: Stream API and lambda expressions
   • Modern: Java 17-21 features with collections
   • Performance: Benchmarking and optimization
   • Patterns: Best practices and design patterns

🚀 Getting Started:
   1. Run: ./gradlew run
   2. Follow the interactive menu
   3. Explore examples step by step
   4. Check the source code in src/main/java/

For more information, visit the project README.md
        """
    }
}

task jmhReport {
    group = 'benchmark'
    description = 'Generate JMH benchmark reports'
    dependsOn jmh
    doLast {
        println "📊 JMH benchmark reports generated in build/reports/jmh/"
    }
}

// Documentation generation
javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    
    title = "Java Collections Tutorial API Documentation"
    exclude '**/internal/**'
    
    doLast {
        println "📖 API documentation generated in build/docs/javadoc/"
    }
}

// Custom source sets for examples (if needed)
sourceSets {
    examples {
        java {
            srcDirs = ['src/examples/java']
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

// Distribution configuration
distributions {
    main {
        distributionBaseName = 'java-collections-tutorial'
        contents {
            from('README.md') {
                into '/'
            }
            from('INSTRUCTIONS.md') {
                into '/'
            }
            from('docs') {
                into 'docs/'
            }
        }
    }
}

// Wrapper configuration
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}